import json
from Parts.configserver import HELLO_TEXT, LIST_COMMANDS, FIB_TEXT
from Parts.keyboardfunction import (
    get_main_menu_keyboard, get_registration_keyboard, 
    get_shop_keyboard, get_categories_keyboard, 
    get_website_keyboard, get_back_keyboard,
    get_payment_keyboard
)
from Parts.service import check_admins, send_zip_file, payment, payment_sessions
from database import (
    set_user_name, save_info_user, delete_account, 
    set_skm_user, list_users, list_admins, enter_user, 
    reg_user_first_check, create_table
)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

def register_handlers(bot):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    @bot.message_handler(commands=["start"])
    def cmd_start(message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        bot.send_message(
            message.chat.id, 
            f"<b>–ü—Ä–∏–≤–µ—Ç, </b>{message.from_user.first_name}!{HELLO_TEXT}", 
            parse_mode="HTML",
            reply_markup=get_main_menu_keyboard()
        )

    @bot.message_handler(commands=["web"])
    def cmd_web(message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /web"""
        bot.send_message(
            message.chat.id, 
            "–ê –≤–æ—Ç –∏ –º–æ–π –ø–µ—Ä–≤—ã–π —Å–∞–π—Ç üòä", 
            reply_markup=get_website_keyboard()
        )

    @bot.message_handler(commands=["admin"])
    def cmd_admin(message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
        if check_admins(message.from_user.id):
            bot.send_message(message.chat.id, "–î–∞—Ä–æ–≤–∞!")
            bot.send_message(message.chat.id, LIST_COMMANDS)
            print("–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞")
        else:
            bot.send_message(message.chat.id, "–ù–µ –∞–¥–º–∏–Ω!")

    @bot.message_handler(commands=["admin_list"])
    def cmd_admin_list(message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin_list"""
        if check_admins(message.from_user.id):
            admins_list = list_admins()
            bot.send_message(message.chat.id, admins_list)

    @bot.message_handler(commands=["user_list"])
    def cmd_user_list(message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /user_list"""
        if check_admins(message.from_user.id):
            users_list = list_users()
            bot.send_message(message.chat.id, users_list)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    @bot.message_handler(content_types=["photo", "document"])
    def handle_media(message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤"""
        bot.reply_to(message, "–û—Ç–ª–∏—á–Ω—ã–π —Ñ–∞–π–ª! –ñ–∞–ª—å, —á—Ç–æ –ø–æ–∫–∞ —è –Ω–µ –º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–∏–º(")

    @bot.message_handler(content_types=["successful_payment"])
    def handle_successful_payment(message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            payment_info = payment_sessions.get(message.chat.id, {})
            amount = payment_info.get('amount', 0)
            user_id = payment_info.get('user_id', message.from_user.id)
            
            if amount > 0:
                success = set_skm_user(user_id, amount)
                if success:
                    bot.send_message(
                        message.chat.id, 
                        f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ù–∞ –≤–∞—à —Å—á–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–æ {amount} SKM."
                    )
                    
                    if message.chat.id in payment_sessions:
                        del payment_sessions[message.chat.id]
                else:
                    bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—á–∏—Å–ª–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞.")
            else:
                bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–ª–∞—Ç–µ–∂.")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞.")

    @bot.message_handler(content_types=["web_app_data"])
    def handle_web_app_data(message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            res = json.loads(message.web_app_data.data)
            amount = res.get('amount', 0)
            
            if amount > 0:
                bot.send_message(
                    message.chat.id, 
                    f"–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount} SKM –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã:",
                    reply_markup=get_payment_keyboard(amount)
                )
            else:
                bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.")
                
        except json.JSONDecodeError as e:
            print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ web app –¥–∞–Ω–Ω—ã—Ö: {e}")
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    @bot.message_handler(func=lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å Photoshop2024")
    def handle_get_file(message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞"""
        bot.send_message(message.chat.id, "–ü–æ–¥–æ–∂–¥–∏—Ç–µ...")
        send_zip_file(message.chat.id)

    @bot.message_handler(func=lambda message: message.text == "–ê–∫–∫–∞—É–Ω—Ç")
    def handle_account(message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        bot.send_message(message.chat.id, "–î–µ–π—Å—Ç–≤–∏—è —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º:", reply_markup=get_registration_keyboard())

    @bot.message_handler(func=lambda message: message.text == "–ù–∞–∑–∞–¥")
    def handle_back(message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥"""
        bot.send_message(message.chat.id, "üëæ", reply_markup=get_back_keyboard())
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_keyboard())

    @bot.message_handler(func=lambda message: message.text == "–ú–∞–≥–∞–∑–∏–Ω SKM")
    def handle_shop(message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞–≥–∞–∑–∏–Ω–∞"""
        bot.send_message(
            message.chat.id, 
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
            reply_markup=get_shop_keyboard()
        )

    @bot.message_handler(func=lambda message: message.text == "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
    def handle_categories(message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        bot.send_message(message.chat.id, "–°—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–µ–º", reply_markup=get_categories_keyboard())

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤
    @bot.callback_query_handler(func=lambda call: call.data == "fib")
    def handle_fib(call):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ Fibonacci"""
        bot.send_message(call.message.chat.id, FIB_TEXT)
        bot.answer_callback_query(call.id, text="–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç.")

    @bot.callback_query_handler(func=lambda call: call.data == "reg")
    def handle_reg(call):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        if reg_user_first_check(call.from_user.id):
            bot.send_message(
                call.message.chat.id, 
                "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç, –µ–≥–æ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π."
            )
        else:
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
            user_states[call.from_user.id] = {"state": "waiting_for_username"}
        bot.answer_callback_query(call.id, text="–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç.")

    @bot.callback_query_handler(func=lambda call: call.data == "enter")
    def handle_enter(call):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞"""
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–º—è, –∞ –ø–æ—Ç–æ–º —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –ø–∞—Ä–æ–ª—å.")
        user_states[call.from_user.id] = {"state": "waiting_for_login"}
        bot.answer_callback_query(call.id, text="–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç.")

    @bot.callback_query_handler(func=lambda call: call.data == "del")
    def handle_delete(call):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è"""
        bot.send_message(call.message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –î–ê/–ù–ï–¢, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å/–æ—Å—Ç–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç.")
        user_states[call.from_user.id] = {"state": "waiting_for_delete_confirmation"}
        bot.answer_callback_query(call.id, text="–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç.")

    @bot.callback_query_handler(func=lambda call: call.data == "info")
    def handle_info(call):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        user_info = create_table(call.from_user.id)
        bot.send_message(call.message.chat.id, user_info, parse_mode="HTML")
        bot.answer_callback_query(call.id)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("pay_"))
    def handle_pay(call):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–ª–∞—Ç—ã"""
        try:
            amount = int(call.data.split("_")[1])
            payment(call.message, amount)
        except (ValueError, IndexError):
            bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞.")
        bot.answer_callback_query(call.id)

    @bot.callback_query_handler(func=lambda call: call.data == "cancel_payment")
    def handle_cancel_payment(call):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ–ø–ª–∞—Ç—ã"""
        bot.send_message(call.message.chat.id, "–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        bot.answer_callback_query(call.id)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    @bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get("state") == "waiting_for_username")
    def process_username(message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        set_user_name(message.text.strip())
        bot.send_message(message.chat.id, "–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å:")
        user_states[message.from_user.id] = {"state": "waiting_for_password"}

    @bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get("state") == "waiting_for_password")
    def process_password(message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è"""
        success = save_info_user(message.from_user.id, message.text.strip())
        if success:
            bot.send_message(message.chat.id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–∫–æ–Ω—á–µ–Ω–∞")
        else:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, –∏–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ.")
        user_states.pop(message.from_user.id, None)

    @bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get("state") == "waiting_for_login")
    def process_login(message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞"""
        try:
            parts = message.text.split()
            if len(parts) >= 2:
                username, password = parts[0], parts[1]
                if enter_user(username, password, message.from_user.id):
                    user_info = create_table(message.from_user.id)
                    bot.send_message(message.chat.id, user_info, parse_mode="HTML")
                else:
                    bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞.")
            else:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
        except Exception as e:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ.")
        user_states.pop(message.from_user.id, None)

    @bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get("state") == "waiting_for_delete_confirmation")
    def process_delete_confirmation(message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è"""
        if message.text.upper() == "–î–ê":
            success = delete_account(message.from_user.id)
            if success:
                bot.send_message(message.chat.id, "–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω!")
            else:
                bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.")
        else:
            bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        user_states.pop(message.from_user.id, None)